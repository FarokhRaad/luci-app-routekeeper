#!/bin/sh /etc/rc.common

# RouteKeeper Init Script with Interface Readiness and Best Route Selection

START=90
STOP=10
USE_PROCD=1

PROG="/usr/libexec/rpcd/routekeeper/rpc_handler.lua"

# Identify best gateway by lowest ping
select_best_gateway() {
    echo "Selecting best default interface based on ping..."

    retries=5
    delay=2

    while [ "$retries" -gt 0 ]; do
        interfaces=$(ubus call luci.routekeeper get_interfaces | jsonfilter -e "@.interfaces[*]" | tr -d '"' | grep -v '^wan$')
        [ -n "$interfaces" ] && break
        echo "  Waiting for interfaces to become ready..."
        sleep "$delay"
        retries=$((retries - 1))
    done

    if [ -z "$interfaces" ]; then
        echo "No usable interfaces found after waiting. Falling back to WAN..."
        ubus call luci.routekeeper set_default_gateway '{"interface":"wan"}'
        return
    fi

    best_if=""
    best_latency=9999

    for iface in $interfaces; do
        echo "  Testing $iface..."
        result=$(ubus call luci.routekeeper run_ping_test "{\"interface\":\"$iface\"}")
        ping_result=$(echo "$result" | jsonfilter -e "@.ping_result" 2>/dev/null)

        latency=$(echo "$ping_result" | grep -oE '[0-9]+')

        if [ -n "$latency" ]; then
            echo "    Latency: ${latency} ms"
            if [ "$latency" -lt "$best_latency" ]; then
                best_latency=$latency
                best_if=$iface
            fi
        else
            echo "    Ping failed or invalid latency"
        fi
    done

    if [ -n "$best_if" ]; then
        echo "Best interface: $best_if ($best_latency ms)"
        ubus call luci.routekeeper set_default_gateway "{\"interface\":\"$best_if\"}"
    else
        echo "No successful ping responses. Falling back to WAN..."
        ubus call luci.routekeeper set_default_gateway '{"interface":"wan"}'
    fi
}

# Start RouteKeeper via procd
start_service() {
    echo "Starting RouteKeeper..."

    select_best_gateway

    procd_open_instance
    procd_set_param command lua "$PROG"
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param respawn
    procd_close_instance
}

# Stop placeholder for clean restart handling
stop_service() {
    echo "Stopping RouteKeeper..."
    # procd handles process termination automatically
}
